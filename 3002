[33m[nodemon] 3.1.10[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): server.ts src/**/*[39m
[33m[nodemon] watching extensions: ts,tsx,js,jsx[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:14:41.650Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:14:41.651Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:15:14.129Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:15:14.130Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: liste â—‹ Compiling /dashboard ...
 âœ“ Compiled /dashboard in 1238ms (1964 modules)
 GET /dashboard 200 in 1484ms
 GET /dashboard 200 in 27ms
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 548ms (913 modules)
 GET /dashboard 200 in 15ms
 âœ“ Compiled in 424ms (913 modules)
 âœ“ Compiled in 391ms (913 modules)
 âœ“ Compiled in 407ms (913 modules)
 GET /dashboard 200 in 15ms
 âœ“ Compiled in 407ms (913 modules)
 GET /dashboard 200 in 24ms
 âœ“ Compiled in 404ms (913 modules)
 âœ“ Compiled in 400ms (913 modules)
 GET /dashboard 200 in 39ms
 âœ“ Compiled in 404ms (913 modules)
 âœ“ Compiled in 405ms (913 modules)
 âœ“ Compiled in 402ms (913 modules)
 âœ“ Compiled in 402ms (91[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:21:00.681Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:21:00.682Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:21:05.472Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:21:05.474Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:21:11.893Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:21:11.894Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:21:26.084Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:21:26.085Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:21:34.161Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:21:34.162Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:21:39.035Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:21:39.036Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:21:45.668Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:21:45.669Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:22:05.478Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:22:05.479Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:22:15.373Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:22:15.374Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:22:20.493Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:22:20.494Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:23:15.365Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:23:15.366Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
 âœ“ Compiled /api/projects in 392ms (441 modules)
Auth: Verifying token...
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/projects/route.ts:33:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 593ms
Auth: Verifying token...
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/projects/route.ts:33:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: 'd',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50&search=d'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {
  OR: [
    { name: [Object] },
    { client: [Object] },
    { description: [Object] }
  ]
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE ("public"."tbl_projects"."name" ILIKE $1 OR "public"."tbl_projects"."client" ILIKE $2 OR "public"."tbl_projects"."description" ILIKE $3) OFFSET $4) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE ("public"."tbl_projects"."name" ILIKE $1 OR "public"."tbl_projects"."client" ILIKE $2 OR "public"."tbl_projects"."description" ILIKE $3) ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $4 OFFSET $5
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50&search=d 200 in 71ms
 â—‹ Compiling /projects ...
 âœ“ Compiled /projects in 988ms (1121 modules)
 GET /projects 200 in 1284ms
 â—‹ Compiling /api/project-types ...
 âœ“ Compiled /api/project-types in 957ms (1113 modules)
Auth: Verifying token...
 GET /api/project-types 200 in 712ms
Auth: Verifying token...
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/resources/route.ts:33:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/users/me/route.ts:23:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
 GET /api/resources 200 in 781ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 404 in 783ms
Auth: Verifying token...
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/projects/route.ts:33:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
 GET /api/projects?page=1&limit=50 200 in 58ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /projects 200 in 258ms
 âœ“ Compiled /login in 450ms (1149 modules)
Auth: Verifying token...
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/users/me/route.ts:23:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
 GET /api/users/me 404 in 607ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /login 200 in 639ms
 âœ“ Compiled in 399ms (419 modules)
 GET /login 200 in 17ms
 âœ“ Compiled in 411ms (419 modules)
 GET /login 200 in 22ms
 âœ“ Compiled in 407ms (419 modules)
 GET /login 200 in 19ms
 âœ“ Compiled in 409ms (419 modules)
 GET /login 200 in 20ms
 âœ“ Compiled in 410ms (419 modules)
 GET /login 200 in 22ms
 âœ“ Compiled in 405ms (419 modules)
 GET /login 200 in 20ms
 âœ“ Compiled in 401ms (419 modules)
 GET /login 200 in 17ms
 âœ“ Compiled in 394ms (419 modules)
 GET /login 200 in 15ms
 âœ“ Compiled in 394ms (419 modules)
 GET /login 200 in 15ms
 âœ“ Compiled in 395ms (419 modules)
 GET /login 200 in 16ms
 âœ“ Compiled in 378ms (419 modules)
 GET /login 200 in 17ms
 âœ“ Compiled in 375ms (419 modules)
 GET /login 200 in 17ms
 âœ“ Compiled in 406ms (419 modules)
 GET /login 200 in 20ms
 âœ“ Compiled in 405ms (419 modules)
 GET /login 200 in 19ms
 âœ“ Compiled in 408ms (419 modules)
 GET /login 200 in 20ms
 âœ“ Compiled in 406ms (419 modules)
 GET /login 200 in 20ms
 âœ“ Compiled /api/auth/login in 253ms (1156 modules)
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /login 200 in 319ms
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 602ms
 â—‹ Compiling /dashboard ...
 âœ“ Compiled /dashboard in 1392ms (2205 modules)
 GET /dashboard 200 in 1053ms
 GET /dashboard 200 in 22ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 55ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 âœ“ Compiled /api/dashboard in 246ms (2207 modules)
Dashboard API: Starting request...
Dashboard API: Bypassing authentication for debugging
Dashboard API: Using mock user: System Administrator
Auth hasPermission: C[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:39:30.847Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:39:30.848Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:39:33.661Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:39:33.662Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:39:36.879Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:39:36.880Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:39:49.420Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:39:49.421Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:40:19.170Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:40:19.171Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:40:50.620Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:40:50.621Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:41:12.682Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:41:12.683Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:41:16.393Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:41:16.394Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:41:31.848Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:41:31.849Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:41:37.790Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:41:37.791Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:41:54.776Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:41:54.777Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:42:19.912Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:42:19.913Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:42:36.348Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:42:36.349Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:44:50.415Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:44:50.416Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:51:23.803Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:51:23.805Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
 âœ“ Compiled /api/health in 245ms (296 modules)
 GET /api/health 200 in 348ms
 âœ“ Compiled /api/projects in 268ms (445 modules)
 GET /api/projects 401 in 368ms
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:51:58.451Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:51:58.452Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:57:30.984Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:57:30.985Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:58:19.492Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:58:19.493Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T03:14:19.807Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T03:14:19.808Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[2025-10-22T05:00:00.151Z] Starting scheduled backup: Daily Noon Backup
[2025-10-22T05:00:00.152Z] Executing backup command for Daily Noon Backup
[2025-10-22T05:00:00.352Z] Backup completed successfully: auto_backup_daily-noon_2025-10-22T05-00-00.sql (0.56 MB)
[2025-10-22T05:00:00.371Z] Failed to log backup activity: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.activityLog.create()` invocation:


Foreign key constraint violated on the constraint: `fk_activity_logs_user`
    at async BackupScheduler.createBackup (src/services/backupScheduler.ts:109:9)
    at async import_node_cron.default.schedule.scheduled (src/services/backupScheduler.ts:178:7) {
  code: 'P2003',
  meta: [Object],
  clientVersion: '6.17.0'
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:12:12.713Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:12:12.715Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:12:20.344Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:12:20.346Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:12:41.659Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:12:41.663Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:12:59.697Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:12:59.698Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:13:41.196Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:13:41.198Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:32:11.941Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:32:11.946Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:32:26.473Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:32:26.474Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:32:39.621Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:32:39.623Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:36:24.628Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:36:24.633Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
 â—‹ Compiling /tasks ...
 âœ“ Compiled /tasks in 1004ms (968 modules)
 GET /tasks 200 in 1409ms
 âœ“ Compiled in 407ms (415 modules)
 â—‹ Compiling /api/resources ...
 âœ“ Compiled /api/resources in 602ms (1125 modules)
Auth: Verifying token...
Auth: Verifying token...
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=50 200 in 809ms
 GET /api/resources 200 in 809ms
 GET /api/users/me 200 in 811ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
 GET /tasks 200 in 251ms
 GET /api/users/me 200 in 60ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 647ms (416 modules)
 GET /tasks 200 in 29ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 487ms (416 modules)
 GET /tasks 200 in 29ms
 âœ“ Compiled in 471ms (416 modules)
 GET /tasks 200 in 69ms
 âœ“ Compiled in 390ms (416 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 403ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 392ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 397ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 394ms (416 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 402ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 369ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 394ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 399ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 396ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 371ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 405ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 391ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 402ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 402ms (416 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 25ms
 âœ“ Compiled in 398ms (416 modules)
 GET /tasks 200 in 33ms
 âœ“ Compiled in 368ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 399ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 392ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 390ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 392ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 381ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 395ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 395ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 399ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 387ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 405ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 406ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 387ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 407ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 404ms (416 modules)
 GET /tasks 200 in 48ms
 âœ“ Compiled in 399ms (416 modules)
 GET /tasks 200 in 26ms
 âœ“ Compiled in 406ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 395ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 415ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 411ms (416 modules)
 GET /tasks 200 in 31ms
 âœ“ Compiled in 404ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 419ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 397ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 28ms
 âœ“ Compiled in 413ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 399ms (416 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 386ms (416 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 377ms (416 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 384ms (416 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 386ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 386ms (416 modules)
 GET /tasks 200 in 15ms
 âœ“ Compiled in 387ms (416 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 388ms (416 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 396ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 398ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 395ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 396ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 395ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 397ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 389ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 397ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 397ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 395ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 396ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 397ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 397ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 397ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 396ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 389ms (416 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 396ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 395ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 402ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 398ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 402ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 394ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 409ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 388ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 398ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 25ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 403ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 402ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 405ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 403ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 404ms (416 modules)
 GET /tasks 200 in 27ms
 âœ“ Compiled in 401ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 399ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 397ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 405ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 403ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 428ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 410ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 402ms (416 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 405ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 419ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 426ms (416 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 425ms (416 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 392ms (416 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 400ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 392ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 395ms (416 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 399ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled /api/auth/login in 222ms (1124 modules)
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 593ms
 âœ“ Compiled in 381ms (416 modules)
 âœ“ Compiled /api/tasks in 59ms (726 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
 GET /api/tasks?page=1&limit=5 200 in 184ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /tasks 200 in 177ms
 GET /tasks 200 in 18ms
 âœ“ Compiled in 403ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 406ms (416 modules)
 GET /tasks 200 in 20ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
 POST /api/auth/login 200 in 237ms
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/tasks?page=1&limit=5 200 in 23ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 478ms (416 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 387ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 387ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 395ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 395ms (416 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 389ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 398ms (416 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 392ms (416 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 412ms (416 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 388ms (416 modules)
 GET /tasks 200 in 20ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 232ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/tasks?page=1&limit=5 403 in 9ms
 âœ“ Compiled in 367ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 378ms (416 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 381ms (416 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 390ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 392ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 393ms (416 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 398ms (416 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 399ms (416 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 382ms (416 modules)
 GET /tasks 200 in 19ms
[32m[nodemon] restarting due to changes...[39m
 âœ“ Compiled in 376ms (416 modules)
 GET /tasks 200 in 149ms
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:50:37.870Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:50:37.872Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:51:11.928Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:51:11.929Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
 âœ“ Compiled /api/auth/login in 352ms (446 modules)
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 727ms
 âœ“ Compiled /api/tasks in 148ms (450 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=2 200 in 230ms
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
 âœ“ Compiled in 400ms (256 modules)
[2025-10-22T05:52:17.412Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:52:17.414Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T06:07:43.504Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T06:07:43.507Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T06:09:58.868Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T06:09:58.870Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T06:27:00.072Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T06:27:00.074Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
 âœ“ Compiled /api/auth/login in 335ms (446 modules)
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 722ms
 âœ“ Compiled /api/resources in 142ms (448 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/resources 200 in 206ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 253ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 13ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 235ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 240ms
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T06:27:46.459Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T06:27:46.460Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 18ms
 âœ“ Compiled in 394ms (418 modules)
 GET /projects 200 in 20ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 12ms
 âœ“ Compiled in 408ms (418 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 34ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 29ms
Auth: Verifying token...
 GET /api/project-types 200 in 34ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 36ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 380ms (418 modules)
 GET /projects 200 in 19ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 15ms
 âœ“ Compiled in 403ms (418 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 34ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 29ms
Auth: Verifying token...
 GET /api/project-types 200 in 33ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 36ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 21ms
 âœ“ Compiled in 395ms (418 modules)
 GET /projects 200 in 22ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 13ms
 âœ“ Compiled in 404ms (418 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 284ms
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âœ“ Compiled / in 327ms (1138 modules)
 GET / 200 in 476ms
 â—‹ Compiling /dashboard ...
 âœ“ Compiled /dashboard in 745ms (2215 modules)
 GET /dashboard 200 in 823ms
 GET /dashboard 200 in 20ms
 GET /dashboard 200 in 192ms
 âœ“ Compiled in 386ms (950 modules)
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 88ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 â—‹ Compiling /api/dashboard ...
 âœ“ Compiled /api/dashboard in 688ms (2217 modules)
Dashboard API: Starting request...
Dashboard API: Bypassing authentication for debugging
Dashboard API: Using mock user: System Administrator
Auth hasPermission: Checking permission: projects:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: budgets:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_roles"."id" FROM "public"."tbl_roles" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE ("public"."tbl_tasks"."status" <> CAST($1::text AS "public"."TaskStatus") AND "public"."tbl_tasks"."endDate" < $2) OFFSET $3) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE "public"."tbl_tasks"."status" = CAST($1::text AS "public"."TaskStatus") OFFSET $2) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE "public"."tbl_users"."isActive" = $1 OFFSET $2) AS "sub"
prisma:query SELECT SUM("anggaran_tersedia") AS "_sum$anggaran_tersedia", SUM("total_penyerapan") AS "_sum$total_penyerapan" FROM (SELECT "public"."tbl_budgets"."anggaran_tersedia", "public"."tbl_budgets"."total_penyerapan" FROM "public"."tbl_budgets" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/dashboard 200 in 788ms
 GET /dashboard 200 in 98ms
 âœ“ Compiled in 400ms (950 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 424ms (950 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 410ms (950 modules)
 GET /dashboard 200 in 17ms
 GET /projects 200 in 28ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 45ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/project-types 200 in 52ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 59ms
 âœ“ Compiled in 410ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 41ms
 âœ“ Compiled in 422ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 99ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 27ms
Auth: Verifying token...
 GET /api/project-types 200 in 30ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 31ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 16ms
 âœ“ Compiled in 407ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 19ms
 âœ“ Compiled in 424ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 31ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 27ms
Auth: Verifying token...
 GET /api/project-types 200 in 31ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 35ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 408ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 17ms
 âœ“ Compiled in 422ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 31ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 29ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 33ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 36ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 16ms
 âœ“ Compiled in 425ms (950 modules)
 GET /projects 200 in 23ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 14ms
 âœ“ Compiled in 467ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 58ms
 âœ“ Compiled in 389ms (950 modules)
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 31ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/project-types 200 in 34ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 43ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 25ms
 âœ“ Compiled in 412ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 19ms
 âœ“ Compiled in 424ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 60ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 32ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 39ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 45ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 26ms
 âœ“ Compiled in 413ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 41ms
 âœ“ Compiled in 428ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 42ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 35ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 40ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 42ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 23ms
 âœ“ Compiled in 407ms (950 modules)
 GET /projects 200 in 19ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 35ms
 âœ“ Compiled in 426ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 59ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 28ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 39ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 45ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 21ms
 âœ“ Compiled in 421ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 32ms
 âœ“ Compiled in 425ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 38ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 33ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 38ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 44ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 20ms
 âœ“ Compiled in 411ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 34ms
 âœ“ Compiled in 427ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 42ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 35ms
Auth: Verifying token...
 GET /api/project-types 200 in 41ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 43ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 24ms
 âœ“ Compiled in 407ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 26ms
 âœ“ Compiled in 429ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 40ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 34ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 37ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 47ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 23ms
 âœ“ Compiled in 420ms (950 modules)
 GET /projects 200 in 22ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 37ms
 âœ“ Compiled in 419ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 37ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 54ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/project-types 200 in 64ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 73ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 25ms
 âœ“ Compiled in 406ms (950 modules)
 GET /projects 200 in 20ms
 âœ“ Compiled in 408ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 15ms
 âœ“ Compiled in 404ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 27ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 33ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 47ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 53ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 28ms
 âœ“ Compiled in 423ms (950 modules)
 GET /projects 200 in 87ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 17ms
 âœ“ Compiled in 405ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 65ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 43ms
Auth: Verifying token...
 GET /api/project-types 200 in 51ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 59ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 24ms
 âœ“ Compiled in 408ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 35ms
 âœ“ Compiled in 419ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 39ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 33ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 38ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 40ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 22ms
 âœ“ Compiled in 409ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 38ms
 âœ“ Compiled in 410ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 31ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 30ms
Auth: Verifying token...
 GET /api/project-types 200 in 41ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 44ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 23ms
 âœ“ Compiled in 429ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 32ms
 âœ“ Compiled in 426ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 34ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 32ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 41ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 46ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 416ms (950 modules)
 GET /projects 200 in 19ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 33ms
 âœ“ Compiled in 412ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 36ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 31ms
 GET /api/project-types 200 in 34ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 40ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 23ms
 âœ“ Compiled in 421ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 36ms
 âœ“ Compiled in 426ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /dashboard 200 in 117ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 36ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Dashboard API: Starting request...
Dashboard API: Bypassing authentication for debugging
Dashboard API: Using mock user: System Administrator
Auth hasPermission: Checking permission: projects:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: budgets:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE "public"."tbl_tasks"."status" = CAST($1::text AS "public"."TaskStatus") OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_roles"."id" FROM "public"."tbl_roles" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE "public"."tbl_users"."isActive" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT SUM("anggaran_tersedia") AS "_sum$anggaran_tersedia", SUM("total_penyerapan") AS "_sum$total_penyerapan" FROM (SELECT "public"."tbl_budgets"."anggaran_tersedia", "public"."tbl_budgets"."total_penyerapan" FROM "public"."tbl_budgets" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE ("public"."tbl_tasks"."status" <> CAST($1::text AS "public"."TaskStatus") AND "public"."tbl_tasks"."endDate" < $2) OFFSET $3) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/dashboard 200 in 46ms
 âœ“ Compiled in 412ms (950 modules)
 GET /dashboard 200 in 20ms
 âœ“ Compiled in 410ms (950 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 401ms (950 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 413ms (950 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 408ms (950 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 411ms (950 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 410ms (950 modules)
 GET /dashboard 200 in 15ms
 âœ“ Compiled in 447ms (950 modules)
 GET /dashboard 200 in 42ms
 âœ“ Compiled in 440ms (950 modules)
 GET /dashboard 200 in 27ms
 âœ“ Compiled in 414ms (950 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 408ms (950 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 409ms (950 modules)
 GET /dashboard 200 in 15ms
 âœ“ Compiled in 408ms (950 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 409ms (950 modules)
 GET /dashboard 200 in 14ms
 âœ“ Compiled in 414ms (950 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 413ms (950 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 373ms (950 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 415ms (950 modules)
 GET /dashboard 200 in 16ms
 GET /projects 200 in 133ms
 âœ“ Compiled in 447ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT 1
 GET /api/project-types 200 in 33ms
 GET /api/resources 200 in 34ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 38ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 68ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 420ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 35ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 35ms
Auth: Verifying token...
 GET /api/project-types 200 in 37ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 44ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 424ms (950 modules)
 GET /projects 200 in 24ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 30ms
 âœ“ Compiled in 419ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 40ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 33ms
Auth: Verifying token...
 GET /api/project-types 200 in 39ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 49ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 25ms
 âœ“ Compiled in 414ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 34ms
 âœ“ Compiled in 419ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 35ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 29ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 33ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 35ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 406ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 16ms
 âœ“ Compiled in 410ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 30ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 28ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 32ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 35ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 16ms
 âœ“ Compiled in 407ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 17ms
 âœ“ Compiled in 420ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 35ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 27ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 31ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 33ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 18ms
 âœ“ Compiled in 405ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 16ms
 âœ“ Compiled in 421ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 29ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 29ms
Auth: Verifying token...
 GET /api/project-types 200 in 33ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 37ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 20ms
 âœ“ Compiled in 405ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 17ms
 âœ“ Compiled in 420ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 38ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 28ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 32ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 35ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 20ms
 âœ“ Compiled in 410ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 19ms
 âœ“ Compiled in 422ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 32ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 22ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 27ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 29ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 18ms
 âœ“ Compiled in 422ms (950 modules)
 GET /projects 200 in 19ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 14ms
 âœ“ Compiled in 427ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 40ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 28ms
Auth: Verifying token...
 GET /api/project-types 200 in 32ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 34ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 18ms
 âœ“ Compiled in 410ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 17ms
 âœ“ Compiled in 407ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 28ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 29ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 32ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 36ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 407ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 18ms
 âœ“ Compiled in 425ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 29ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 28ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 32ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 34ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 18ms
 âœ“ Compiled in 420ms (950 modules)
 GET /projects 200 in 20ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 14ms
 âœ“ Compiled in 421ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 30ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 26ms
Auth: Verifying token...
 GET /api/project-types 200 in 29ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 35ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 415ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 15ms
 âœ“ Compiled in 430ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 29ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 27ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 30ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 34ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 18ms
 âœ“ Compiled in 411ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 18ms
 âœ“ Compiled in 423ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 30ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 28ms
Auth: Verifying token...
 GET /api/project-types 200 in 35ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/resources 200 in 38ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 20ms
 âœ“ Compiled in 403ms (950 modules)
 GET /projects 200 in 20ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 15ms
 âœ“ Compiled in 422ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 41ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 29ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 34ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 36ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 394ms (950 modules)
 GET /projects 200 in 19ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 19ms
 âœ“ Compiled in 413ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 28ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 22ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 26ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 28ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 434ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 13ms
 âœ“ Compiled in 397ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 25ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 28ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 32ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 34ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 18ms
 âœ“ Compiled in 426ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 16ms
 âœ“ Compiled in 420ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 29ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 28ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 32ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 34ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 410ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 18ms
 âœ“ Compiled in 426ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 41ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 27ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 31ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 33ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 424ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 18ms
 âœ“ Compiled in 405ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 28ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 26ms
Auth: Verifying token...
 GET /api/project-types 200 in 31ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 33ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 16ms
 âœ“ Compiled in 398ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/projects?page=1&limit=50 200 in 17ms
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 431ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 29ms
Auth: Verifying token...
Auth: Token verified successfully
Auth: Verifying token...
 GET /api/users/me 200 in 27ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/project-types 200 in 31ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 33ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 12ms
 âœ“ Compiled in 411ms (950 modules)
 GET /projects 200 in 19ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 16ms
 âœ“ Compiled in 516ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 50ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 25ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 33ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 36ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 24ms
 âœ“ Compiled in 403ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 17ms
 âœ“ Compiled in 430ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 31ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 26ms
Auth: Verifying token...
 GET /api/project-types 200 in 33ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 37ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 18ms
 âœ“ Compiled in 399ms (950 modules)
 GET /projects 200 in 21ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 18ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 435ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 34ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 23ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 26ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 28ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 18ms
 âœ“ Compiled in 420ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 14ms
 âœ“ Compiled in 427ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 31ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
Auth: Verifying token...
 GET /api/project-types 200 in 27ms
 GET /api/users/me 200 in 27ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 29ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 14ms
 âœ“ Compiled in 394ms (950 modules)
 GET /projects 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 17ms
 âœ“ Compiled in 421ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 27ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 25ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 34ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 39ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 20ms
 âœ“ Compiled in 400ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 19ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 498ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 41ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 25ms
Auth: Verifying token...
 GET /api/project-types 200 in 30ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 35ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 24ms
 âœ“ Compiled in 387ms (950 modules)
 GET /projects 200 in 19ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 20ms
 âœ“ Compiled in 425ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 36ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 24ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 31ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 35ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 405ms (950 modules)
 GET /projects 200 in 22ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 18ms
 âœ“ Compiled in 435ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 38ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 27ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 29ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 32ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 402ms (950 modules)
 GET /projects 200 in 23ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 22ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 446ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 35ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 25ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/project-types 200 in 32ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/resources 200 in 41ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 24ms
 âœ“ Compiled in 407ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 18ms
 âœ“ Compiled in 420ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 37ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 29ms
Auth: Verifying token...
 GET /api/project-types 200 in 32ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 36ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 23ms
 âœ“ Compiled in 414ms (950 modules)
 GET /projects 200 in 25ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 75ms
 âœ“ Compiled in 439ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 36ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 20ms
Auth: Verifying token...
 GET /api/project-types 200 in 24ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 26ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 17ms
 âœ“ Compiled in 397ms (950 modules)
 GET /projects 200 in 18ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 83ms
 âœ“ Compiled in 445ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 39ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 24ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/project-types 200 in 27ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 33ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 398ms (950 modules)
 GET /projects 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 77ms
 âœ“ Compiled in 430ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 35ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 26ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 31ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 33ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 420ms (950 modules)
 GET /projects 200 in 21ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 71ms
 âœ“ Compiled in 412ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 36ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 26ms
Auth: Verifying token...
 GET /api/project-types 200 in 32ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 37ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 18ms
 âœ“ Compiled in 470ms (950 modules)
 GET /projects 200 in 68ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
 GET /api/projects?page=1&limit=50 200 in 74ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 426ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 46ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 25ms
Auth: Verifying token...
 GET /api/project-types 200 in 30ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 32ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 19ms
 âœ“ Compiled in 407ms (950 modules)
 GET /projects 200 in 23ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
 GET /api/projects?page=1&limit=50 200 in 17ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type", "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 399ms (950 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /projects 200 in 33ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 200 in 26ms
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
 GET /api/project-types 200 in 32ms
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 35ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 21ms
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:51:23.800Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:51:23.801Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:51:58.443Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:51:58.444Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:57:30.975Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:57:30.976Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T02:58:19.498Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T02:58:19.499Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T03:14:19.804Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T03:14:19.806Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
 âœ“ Compiled /api/projects/[id] in 344ms (441 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Update project error: Error [ZodError]: [
  {
    "code": "invalid_value",
    "values": [
      "INFRA_NETWORK",
      "INFRA_CLOUD_DC",
      "MULTIMEDIA_IOT",
      "DIGITAL_ELECTRICITY",
      "SAAS_BASED"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid option: expected one of \"INFRA_NETWORK\"|\"INFRA_CLOUD_DC\"|\"MULTIMEDIA_IOT\"|\"DIGITAL_ELECTRICITY\"|\"SAAS_BASED\""
  }
]
    at PUT (src/app/api/projects/[id]/route.ts:141:47)
  139 |
  140 |     const body = await request.json();
> 141 |     const validatedData = updateProjectSchema.parse(body);
      |                                               ^
  142 |
  143 |     const existingProject = await db.project.findUnique({
  144 |       where: { id: params.id },
 PUT /api/projects/dd380451-766a-4297-b4f1-0cc5d5c6b1bc 500 in 952ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Update project error: Error [ZodError]: [
  {
    "code": "invalid_value",
    "values": [
      "INFRA_NETWORK",
      "INFRA_CLOUD_DC",
      "MULTIMEDIA_IOT",
      "DIGITAL_ELECTRICITY",
      "SAAS_BASED"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid option: expected one of \"INFRA_NETWORK\"|\"INFRA_CLOUD_DC\"|\"MULTIMEDIA_IOT\"|\"DIGITAL_ELECTRICITY\"|\"SAAS_BASED\""
  }
]
    at PUT (src/app/api/projects/[id]/route.ts:141:47)
  139 |
  140 |     const body = await request.json();
> 141 |     const validatedData = updateProjectSchema.parse(body);
      |                                               ^
  142 |
  143 |     const existingProject = await db.project.findUnique({
  144 |       where: { id: params.id },
 PUT /api/projects/dd380451-766a-4297-b4f1-0cc5d5c6b1bc 500 in 61ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Update project error: Error [ZodError]: [
  {
    "code": "invalid_value",
    "values": [
      "INFRA_NETWORK",
      "INFRA_CLOUD_DC",
      "MULTIMEDIA_IOT",
      "DIGITAL_ELECTRICITY",
      "SAAS_BASED"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid option: expected one of \"INFRA_NETWORK\"|\"INFRA_CLOUD_DC\"|\"MULTIMEDIA_IOT\"|\"DIGITAL_ELECTRICITY\"|\"SAAS_BASED\""
  }
]
    at PUT (src/app/api/projects/[id]/route.ts:141:47)
  139 |
  140 |     const body = await request.json();
> 141 |     const validatedData = updateProjectSchema.parse(body);
      |                                               ^
  142 |
  143 |     const existingProject = await db.project.findUnique({
  144 |       where: { id: params.id },
 PUT /api/projects/dd380451-766a-4297-b4f1-0cc5d5c6b1bc 500 in 40ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Update project error: Error [ZodError]: [
  {
    "code": "invalid_value",
    "values": [
      "INFRA_NETWORK",
      "INFRA_CLOUD_DC",
      "MULTIMEDIA_IOT",
      "DIGITAL_ELECTRICITY",
      "SAAS_BASED"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid option: expected one of \"INFRA_NETWORK\"|\"INFRA_CLOUD_DC\"|\"MULTIMEDIA_IOT\"|\"DIGITAL_ELECTRICITY\"|\"SAAS_BASED\""
  }
]
    at PUT (src/app/api/projects/[id]/route.ts:141:47)
  139 |
  140 |     const body = await request.json();
> 141 |     const validatedData = updateProjectSchema.parse(body);
      |                                               ^
  142 |
  143 |     const existingProject = await db.project.findUnique({
  144 |       where: { id: params.id },
 PUT /api/projects/dd380451-766a-4297-b4f1-0cc5d5c6b1bc 500 in 45ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Update project error: Error [ZodError]: [
  {
    "code": "invalid_value",
    "values": [
      "INFRA_NETWORK",
      "INFRA_CLOUD_DC",
      "MULTIMEDIA_IOT",
      "DIGITAL_ELECTRICITY",
      "SAAS_BASED"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid option: expected one of \"INFRA_NETWORK\"|\"INFRA_CLOUD_DC\"|\"MULTIMEDIA_IOT\"|\"DIGITAL_ELECTRICITY\"|\"SAAS_BASED\""
  }
]
    at PUT (src/app/api/projects/[id]/route.ts:141:47)
  139 |
  140 |     const body = await request.json();
> 141 |     const validatedData = updateProjectSchema.parse(body);
      |                                               ^
  142 |
  143 |     const existingProject = await db.project.findUnique({
  144 |       where: { id: params.id },
 PUT /api/projects/dd380451-766a-4297-b4f1-0cc5d5c6b1bc 500 in 39ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Update project error: Error [ZodError]: [
  {
    "code": "invalid_value",
    "values": [
      "INFRA_NETWORK",
      "INFRA_CLOUD_DC",
      "MULTIMEDIA_IOT",
      "DIGITAL_ELECTRICITY",
      "SAAS_BASED"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid option: expected one of \"INFRA_NETWORK\"|\"INFRA_CLOUD_DC\"|\"MULTIMEDIA_IOT\"|\"DIGITAL_ELECTRICITY\"|\"SAAS_BASED\""
  }
]
    at PUT (src/app/api/projects/[id]/route.ts:141:47)
  139 |
  140 |     const body = await request.json();
> 141 |     const validatedData = updateProjectSchema.parse(body);
      |                                               ^
  142 |
  143 |     const existingProject = await db.project.findUnique({
  144 |       where: { id: params.id },
 PUT /api/projects/dd380451-766a-4297-b4f1-0cc5d5c6b1bc 500 in 38ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Update project error: Error [ZodError]: [
  {
    "code": "invalid_value",
    "values": [
      "INFRA_NETWORK",
      "INFRA_CLOUD_DC",
      "MULTIMEDIA_IOT",
      "DIGITAL_ELECTRICITY",
      "SAAS_BASED"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid option: expected one of \"INFRA_NETWORK\"|\"INFRA_CLOUD_DC\"|\"MULTIMEDIA_IOT\"|\"DIGITAL_ELECTRICITY\"|\"SAAS_BASED\""
  }
]
    at PUT (src/app/api/projects/[id]/route.ts:141:47)
  139 |
  140 |     const body = await request.json();
> 141 |     const validatedData = updateProjectSchema.parse(body);
      |                                               ^
  142 |
  143 |     const existingProject = await db.project.findUnique({
  144 |       where: { id: params.id },
 PUT /api/projects/dd380451-766a-4297-b4f1-0cc5d5c6b1bc 500 in 37ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Update project error: Error [ZodError]: [
  {
    "code": "invalid_value",
    "values": [
      "INFRA_NETWORK",
      "INFRA_CLOUD_DC",
      "MULTIMEDIA_IOT",
      "DIGITAL_ELECTRICITY",
      "SAAS_BASED"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid option: expected one of \"INFRA_NETWORK\"|\"INFRA_CLOUD_DC\"|\"MULTIMEDIA_IOT\"|\"DIGITAL_ELECTRICITY\"|\"SAAS_BASED\""
  }
]
    at PUT (src/app/api/projects/[id]/route.ts:141:47)
  139 |
  140 |     const body = await request.json();
> 141 |     const validatedData = updateProjectSchema.parse(body);
      |                                               ^
  142 |
  143 |     const existingProject = await db.project.findUnique({
  144 |       where: { id: params.id },
 PUT /api/projects/dd380451-766a-4297-b4f1-0cc5d5c6b1bc 500 in 37ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Update project error: Error [ZodError]: [
  {
    "code": "invalid_value",
    "values": [
      "INFRA_NETWORK",
      "INFRA_CLOUD_DC",
      "MULTIMEDIA_IOT",
      "DIGITAL_ELECTRICITY",
      "SAAS_BASED"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid option: expected one of \"INFRA_NETWORK\"|\"INFRA_CLOUD_DC\"|\"MULTIMEDIA_IOT\"|\"DIGITAL_ELECTRICITY\"|\"SAAS_BASED\""
  }
]
    at PUT (src/app/api/projects/[id]/route.ts:141:47)
  139 |
  140 |     const body = await request.json();
> 141 |     const validatedData = updateProjectSchema.parse(body);
      |                                               ^
  142 |
  143 |     const existingProject = await db.project.findUnique({
  144 |       where: { id: params.id },
 PUT /api/projects/dd380451-766a-4297-b4f1-0cc5d5c6b1bc 500 in 40ms
 âœ“ Compiled /api/projects in 215ms (443 modules)
 GET /api/projects 401 in 287ms
 âœ“ Compiled /api/tasks in 124ms (445 modules)
 GET /api/tasks 401 in 170ms
 âœ“ Compiled /api/users in 203ms (449 modules)
 GET /api/users 401 in 237ms
 âœ“ Compiled /api/documents in 79ms (452 modules)
 GET /api/documents 401 in 111ms
 âœ“ Compiled /api/project-types in 144ms (454 modules)
 GET /api/project-types 200 in 166ms
 âœ“ Compiled /api/auth/login in 154ms (453 modules)
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 482ms
 âœ“ Compiled /api/projects in 52ms (263 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/projects 200 in 105ms
 âœ“ Compiled /api/tasks in 52ms (265 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks 200 in 87ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 290ms
 âœ“ Compiled /api/projects/[id] in 81ms (260 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Error: Route "/api/projects/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (src/app/api/projects/[id]/route.ts:144:27)
  142 |
  143 |     const existingProject = await db.project.findUnique({
> 144 |       where: { id: params.id },
      |                           ^
  145 |     });
  146 |
  147 |     if (!existingProject) {
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Error: Route "/api/projects/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (src/app/api/projects/[id]/route.ts:189:27)
  187 |
  188 |     const project = await db.project.update({
> 189 |       where: { id: params.id },
      |                           ^
  190 |       data: {
  191 |         ...validatedData,
  192 |         startDate: validatedData.startDate ? new Date(validatedData.startDate) : undefined,
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage" FROM "public"."tbl_projects" WHERE ("public"."tbl_projects"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query BEGIN
prisma:query UPDATE "public"."tbl_projects" SET "name" = $1, "type" = CAST($2::text AS "public"."ProjectType"), "status" = CAST($3::text AS "public"."ProjectStatus"), "priority" = CAST($4::text AS "public"."Priority"), "progress" = $5, "updatedAt" = $6 WHERE ("public"."tbl_projects"."id" = $7 AND 1=1) RETURNING "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_project_members"."id", "public"."tbl_project_members"."projectId", "public"."tbl_project_members"."userId", "public"."tbl_project_members"."role", "public"."tbl_project_members"."joinedAt" FROM "public"."tbl_project_members" WHERE "public"."tbl_project_members"."projectId" IN ($1) OFFSET $2
prisma:query COMMIT
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 PUT /api/projects/77c3c295-7124-4e47-8211-c847552bba14 200 in 202ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 349ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Error: Route "/api/projects/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (src/app/api/projects/[id]/route.ts:144:27)
  142 |
  143 |     const existingProject = await db.project.findUnique({
> 144 |       where: { id: params.id },
      |                           ^
  145 |     });
  146 |
  147 |     if (!existingProject) {
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage" FROM "public"."tbl_projects" WHERE ("public"."tbl_projects"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Error: Route "/api/projects/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (src/app/api/projects/[id]/route.ts:189:27)
  187 |
  188 |     const project = await db.project.update({
> 189 |       where: { id: params.id },
      |                           ^
  190 |       data: {
  191 |         ...validatedData,
  192 |         startDate: validatedData.startDate ? new Date(validatedData.startDate) : undefined,
prisma:query BEGIN
prisma:query UPDATE "public"."tbl_projects" SET "name" = $1, "description" = $2, "type" = CAST($3::text AS "public"."ProjectType"), "client" = $4, "location" = $5, "status" = CAST($6::text AS "public"."ProjectStatus"), "priority" = CAST($7::text AS "public"."Priority"), "progress" = $8, "startDate" = $9, "endDate" = $10, "updatedAt" = $11 WHERE ("public"."tbl_projects"."id" = $12 AND 1=1) RETURNING "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_project_members"."id", "public"."tbl_project_members"."projectId", "public"."tbl_project_members"."userId", "public"."tbl_project_members"."role", "public"."tbl_project_members"."joinedAt" FROM "public"."tbl_project_members" WHERE "public"."tbl_project_members"."projectId" IN ($1) OFFSET $2
prisma:query COMMIT
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 PUT /api/projects/77c3c295-7124-4e47-8211-c847552bba14 200 in 101ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 236ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 232ms
[2025-10-22T05:00:00.149Z] Starting scheduled backup: Daily Noon Backup
[2025-10-22T05:00:00.149Z] Executing backup command for Daily Noon Backup
[2025-10-22T05:00:00.368Z] Backup completed successfully: auto_backup_daily-noon_2025-10-22T05-00-00.sql (0.74 MB)
[2025-10-22T05:00:00.399Z] Failed to log backup activity: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.activityLog.create()` invocation:


Foreign key constraint violated on the constraint: `fk_activity_logs_user`
    at async BackupScheduler.createBackup (src/services/backupScheduler.ts:109:9)
    at async import_node_cron.default.schedule.scheduled (src/services/backupScheduler.ts:178:7) {
  code: 'P2003',
  meta: [Object],
  clientVersion: '6.17.0'
}
 âœ“ Compiled /api/health in 164ms (296 modules)
 GET /api/health 200 in 206ms
 âœ“ Compiled /api/auth/login in 48ms (254 modules)
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 361ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 241ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 232ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 241ms
 âœ“ Compiled /api/projects in 32ms (256 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects 200 in 84ms
 âœ“ Compiled /api/projects/[id] in 45ms (258 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Error: Route "/api/projects/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (src/app/api/projects/[id]/route.ts:144:27)
  142 |
  143 |     const existingProject = await db.project.findUnique({
> 144 |       where: { id: params.id },
      |                           ^
  145 |     });
  146 |
  147 |     if (!existingProject) {
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Error: Route "/api/projects/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (src/app/api/projects/[id]/route.ts:189:27)
  187 |
  188 |     const project = await db.project.update({
> 189 |       where: { id: params.id },
      |                           ^
  190 |       data: {
  191 |         ...validatedData,
  192 |         startDate: validatedData.startDate ? new Date(validatedData.startDate) : undefined,
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage" FROM "public"."tbl_projects" WHERE ("public"."tbl_projects"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query BEGIN
prisma:query UPDATE "public"."tbl_projects" SET "name" = $1, "type" = CAST($2::text AS "public"."ProjectType"), "status" = CAST($3::text AS "public"."ProjectStatus"), "priority" = CAST($4::text AS "public"."Priority"), "progress" = $5, "updatedAt" = $6 WHERE ("public"."tbl_projects"."id" = $7 AND 1=1) RETURNING "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_project_members"."id", "public"."tbl_project_members"."projectId", "public"."tbl_project_members"."userId", "public"."tbl_project_members"."role", "public"."tbl_project_members"."joinedAt" FROM "public"."tbl_project_members" WHERE "public"."tbl_project_members"."projectId" IN ($1) OFFSET $2
prisma:query COMMIT
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 PUT /api/projects/bf3ea009-bbef-45b7-b473-0f3c3531d3d1 200 in 166ms
 âœ“ Compiled /api/tasks in 119ms (260 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks 200 in 155ms
 âœ“ Compiled /api/users in 47ms (262 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: users:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/users 200 in 97ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE 1=1 ORDER BY "public"."tbl_users"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 âœ“ Compiled /api/documents in 50ms (265 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: documents:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query 
      SELECT * FROM v_document_management 
      WHERE 1=1
      ORDER BY document_created_at DESC
      LIMIT $1 OFFSET $2
    
prisma:query 
      SELECT COUNT(*) as count FROM v_document_management 
      WHERE 1=1
    
 GET /api/documents 200 in 96ms
 âœ“ Compiled /api/project-types in 104ms (267 modules)
 GET /api/project-types 200 in 125ms
 âœ“ Compiled /api/dashboard in 202ms (463 modules)
Dashboard API: Starting request...
Dashboard API: Bypassing authentication for debugging
Dashboard API: Using mock user: System Administrator
Auth hasPermission: Checking permission: projects:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: budgets:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT SUM("anggaran_tersedia") AS "_sum$anggaran_tersedia", SUM("total_penyerapan") AS "_sum$total_penyerapan" FROM (SELECT "public"."tbl_budgets"."anggaran_tersedia", "public"."tbl_budgets"."total_penyerapan" FROM "public"."tbl_budgets" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_roles"."id" FROM "public"."tbl_roles" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE "public"."tbl_tasks"."status" = CAST($1::text AS "public"."TaskStatus") OFFSET $2) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE ("public"."tbl_tasks"."status" <> CAST($1::text AS "public"."TaskStatus") AND "public"."tbl_tasks"."endDate" < $2) OFFSET $3) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE "public"."tbl_users"."isActive" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/dashboard 200 in 237ms
 âœ“ Compiled /api/health in 79ms (102 modules)
 GET /api/health 200 in 120ms
 âœ“ Compiled /api/auth/login in 39ms (254 modules)
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 377ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 231ms
 âœ“ Compiled /api/projects in 30ms (258 modules)
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/projects 403 in 81ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 237ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/projects 403 in 8ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 228ms
 âœ“ Compiled /api/users/me in 191ms (454 modules)
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/users/me 401 in 224ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 248ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/users/me 401 in 11ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 251ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 233ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects 200 in 19ms
 âœ“ Compiled /api/projects/[id] in 68ms (260 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Error: Route "/api/projects/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (src/app/api/projects/[id]/route.ts:144:27)
  142 |
  143 |     const existingProject = await db.project.findUnique({
> 144 |       where: { id: params.id },
      |                           ^
  145 |     });
  146 |
  147 |     if (!existingProject) {
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage" FROM "public"."tbl_projects" WHERE ("public"."tbl_projects"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Error: Route "/api/projects/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (src/app/api/projects/[id]/route.ts:189:27)
  187 |
  188 |     const project = await db.project.update({
> 189 |       where: { id: params.id },
      |                           ^
  190 |       data: {
  191 |         ...validatedData,
  192 |         startDate: validatedData.startDate ? new Date(validatedData.startDate) : undefined,
prisma:query BEGIN
prisma:query UPDATE "public"."tbl_projects" SET "name" = $1, "type" = CAST($2::text AS "public"."ProjectType"), "status" = CAST($3::text AS "public"."ProjectStatus"), "priority" = CAST($4::text AS "public"."Priority"), "progress" = $5, "updatedAt" = $6 WHERE ("public"."tbl_projects"."id" = $7 AND 1=1) RETURNING "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_project_members"."id", "public"."tbl_project_members"."projectId", "public"."tbl_project_members"."userId", "public"."tbl_project_members"."role", "public"."tbl_project_members"."joinedAt" FROM "public"."tbl_project_members" WHERE "public"."tbl_project_members"."projectId" IN ($1) OFFSET $2
prisma:query COMMIT
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 PUT /api/projects/bf3ea009-bbef-45b7-b473-0f3c3531d3d1 200 in 182ms
 âœ“ Compiled /api/tasks in 95ms (262 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks 200 in 150ms
 âœ“ Compiled /api/users in 46ms (264 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: users:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE 1=1 ORDER BY "public"."tbl_users"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users 200 in 77ms
 âœ“ Compiled /api/documents in 43ms (267 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: documents:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query 
      SELECT * FROM v_document_management 
      WHERE 1=1
      ORDER BY document_created_at DESC
      LIMIT $1 OFFSET $2
    
prisma:query 
      SELECT COUNT(*) as count FROM v_document_management 
      WHERE 1=1
    
 GET /api/documents 200 in 73ms
 â—‹ Compiling /dashboard ...
 âœ“ Compiled /dashboard in 1241ms (1965 modules)
 GET /dashboard 200 in 1438ms
 GET /dashboard 200 in 17ms
 GET /dashboard 200 in 168ms
 âœ“ Compiled in 452ms (914 modules)
 âœ“ Compiled in 423ms (914 modules)
 âœ“ Compiled /projects in 768ms (2022 modules)
 GET /projects 200 in 662ms
 âœ“ Compiled /api/project-types in 719ms (2190 modules)
Auth: Verifying token...
 GET /api/project-types 200 in 602ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth: Token verified successfully
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
 GET /api/resources 200 in 610ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 613ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /projects 200 in 245ms
 GET /api/users/me 200 in 51ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 âœ“ Compiled /api/projects in 391ms (2208 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 336ms
 GET /projects 200 in 87ms
 âœ“ Compiled in 405ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 413ms (948 modules)
 GET /projects 200 in 18ms
 âœ“ Compiled in 416ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 412ms (948 modules)
 GET /projects 200 in 20ms
 âœ“ Compiled in 413ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 416ms (948 modules)
 GET /projects 200 in 19ms
 âœ“ Compiled in 415ms (948 modules)
 GET /projects 200 in 16ms
 âœ“ Compiled in 419ms (948 modules)
 GET /projects 200 in 20ms
 âœ“ Compiled in 415ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 412ms (948 modules)
 GET /projects 200 in 24ms
 âœ“ Compiled in 415ms (948 modules)
 GET /projects 200 in 16ms
 âœ“ Compiled in 409ms (948 modules)
 GET /projects 200 in 18ms
 âœ“ Compiled in 413ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 413ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 416ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 412ms (948 modules)
 GET /projects 200 in 20ms
 âœ“ Compiled in 416ms (948 modules)
 GET /projects 200 in 18ms
 âœ“ Compiled /api/projects/[id] in 176ms (1262 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:update for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Error: Route "/api/projects/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (src/app/api/projects/[id]/route.ts:144:27)
  142 |
  143 |     const existingProject = await db.project.findUnique({
> 144 |       where: { id: params.id },
      |                           ^
  145 |     });
  146 |
  147 |     if (!existingProject) {
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage" FROM "public"."tbl_projects" WHERE ("public"."tbl_projects"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Error: Route "/api/projects/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (src/app/api/projects/[id]/route.ts:189:27)
  187 |
  188 |     const project = await db.project.update({
> 189 |       where: { id: params.id },
      |                           ^
  190 |       data: {
  191 |         ...validatedData,
  192 |         startDate: validatedData.startDate ? new Date(validatedData.startDate) : undefined,
prisma:query BEGIN
prisma:query UPDATE "public"."tbl_projects" SET "name" = $1, "description" = $2, "type" = CAST($3::text AS "public"."ProjectType"), "client" = $4, "location" = $5, "status" = CAST($6::text AS "public"."ProjectStatus"), "priority" = CAST($7::text AS "public"."Priority"), "progress" = $8, "startDate" = $9, "endDate" = $10, "updatedAt" = $11 WHERE ("public"."tbl_projects"."id" = $12 AND 1=1) RETURNING "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_project_members"."id", "public"."tbl_project_members"."projectId", "public"."tbl_project_members"."userId", "public"."tbl_project_members"."role", "public"."tbl_project_members"."joinedAt" FROM "public"."tbl_project_members" WHERE "public"."tbl_project_members"."projectId" IN ($1) OFFSET $2
prisma:query COMMIT
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 PUT /api/projects/dd380451-766a-4297-b4f1-0cc5d5c6b1bc 200 in 292ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 19ms
 âœ“ Compiled in 399ms (948 modules)
 GET /projects 200 in 30ms
 âœ“ Compiled in 411ms (948 modules)
 GET /projects 200 in 16ms
 âœ“ Compiled in 414ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 416ms (948 modules)
 GET /projects 200 in 16ms
 âœ“ Compiled in 407ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 412ms (948 modules)
 GET /projects 200 in 16ms
 âœ“ Compiled in 399ms (948 modules)
 GET /projects 200 in 18ms
 âœ“ Compiled in 413ms (948 modules)
 GET /projects 200 in 16ms
 âœ“ Compiled in 411ms (948 modules)
 GET /projects 200 in 18ms
 âœ“ Compiled in 411ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 411ms (948 modules)
 GET /projects 200 in 19ms
 âœ“ Compiled in 418ms (948 modules)
 GET /projects 200 in 17ms
 âœ“ Compiled in 404ms (948 modules)
 GET /projects 200 in 20ms
 âœ“ Compiled in 413ms (948 modules)
 GET /projects 200 in 18ms
 âœ“ Compiled in 410ms (948 modules)
 GET /projects 200 in 16ms
 âœ“ Compiled in 393ms (948 modules)
 GET /projects 200 in 18ms
 âœ“ Compiled in 410ms (948 modules)
 GET /projects 200 in 17ms
 â—‹ Compiling /tasks ...
 âœ“ Compiled /tasks in 1046ms (2219 modules)
 GET /tasks 200 in 888ms
 GET /tasks 200 in 16ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 44ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 âœ“ Compiled /api/tasks in 382ms (2221 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 328ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=50 200 in 362ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /tasks 200 in 37ms
 âœ“ Compiled in 413ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 415ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 416ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 411ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 411ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 394ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 400ms (951 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 411ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 403ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 401ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 404ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 406ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 414ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 401ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 401ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 404ms (951 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 414ms (951 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 411ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 405ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 406ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 403ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 409ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 411ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 400ms (951 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 417ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 410ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 415ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 406ms (951 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 415ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 409ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 411ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 414ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 421ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 408ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 414ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 414ms (951 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 406ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 399ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 418ms (951 modules)
 GET /tasks 200 in 30ms
 âœ“ Compiled in 413ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 419ms (951 modules)
 GET /tasks 200 in 15ms
 âœ“ Compiled in 423ms (951 modules)
 GET /tasks 200 in 44ms
 âœ“ Compiled in 429ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 406ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 401ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 408ms (951 modules)
 GET /tasks 200 in 15ms
 âœ“ Compiled in 410ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 415ms (951 modules)
 GET /tasks 200 in 15ms
 âœ“ Compiled in 403ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 414ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 385ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 396ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 412ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 392ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 414ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 418ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 411ms (951 modules)
 GET /tasks 200 in 26ms
 âœ“ Compiled in 416ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 408ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 432ms (951 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 396ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 415ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 407ms (951 modules)
 GET /tasks 200 in 15ms
 âœ“ Compiled in 411ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 410ms (951 modules)
 GET /tasks 200 in 15ms
 âœ“ Compiled in 412ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 386ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 409ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 386ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 379ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 405ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 406ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 415ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 400ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 413ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 423ms (951 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 410ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 389ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 401ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 405ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 408ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 401ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 406ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 395ms (951 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 416ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 389ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 420ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 411ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 411ms (951 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 402ms (951 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 407ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 398ms (951 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 428ms (951 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 422ms (951 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 414ms (951 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 404ms (951 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 387ms (951 modules)
 GET /tasks 200 in 19ms
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:12:12.714Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:12:12.716Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:12:20.336Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:12:20.337Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:12:41.644Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:12:41.646Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:12:59.717Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:12:59.718Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:13:41.188Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:13:41.189Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:32:11.938Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:32:11.940Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:32:26.462Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:32:26.465Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:32:39.634Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:32:39.636Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:36:24.630Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:36:24.631Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:50:37.870Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:50:37.875Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:51:11.920Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:51:11.923Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T05:52:17.438Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T05:52:17.439Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T06:07:43.505Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T06:07:43.509Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
 âœ“ Compiled /api/auth/login in 361ms (446 modules)
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 746ms
 âœ“ Compiled /api/resources in 151ms (448 modules)
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/resources 403 in 213ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 247ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/resources 403 in 13ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 227ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 229ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 237ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 228ms
 âœ“ Compiled /api/tasks in 179ms (452 modules)
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/tasks?page=1&limit=5 200 in 262ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 246ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 16ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 228ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/resources 403 in 12ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 227ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/resources 403 in 9ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 236ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/resources 403 in 10ms
 âœ“ Compiled /api/health in 100ms (454 modules)
 GET /api/health 200 in 139ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 257ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=5 200 in 18ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 225ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 14ms
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
 âœ“ Compiled in 349ms (258 modules)
[2025-10-22T06:09:58.869Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T06:09:58.872Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
 â—‹ Compiling /tasks ...
 âœ“ Compiled /tasks in 947ms (968 modules)
 GET /tasks 200 in 1267ms
 âœ“ Compiled in 406ms (415 modules)
 â—‹ Compiling /api/resources ...
 âœ“ Compiled /api/resources in 558ms (1125 modules)
Auth: Verifying token...
Auth: Verifying token...
Auth: Verifying token...
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/tasks/route.ts:33:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/resources/route.ts:33:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/users/me/route.ts:23:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/tasks?page=1&limit=50 200 in 909ms
 GET /api/resources 200 in 910ms
 GET /api/users/me 404 in 913ms
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
Auth: Verifying token...
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/users/me/route.ts:23:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
 GET /tasks 200 in 373ms
 GET /api/users/me 404 in 41ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 âœ“ Compiled /login in 187ms (1147 modules)
 GET /login 200 in 333ms
 âœ“ Compiled in 391ms (425 modules)
 âœ“ Compiled in 409ms (425 modules)
 âœ“ Compiled in 403ms (425 modules)
 âœ“ Compiled in 397ms (425 modules)
 âœ“ Compiled in 401ms (425 modules)
 âœ“ Compiled in 400ms (425 modules)
 âœ“ Compiled in 396ms (425 modules)
 âœ“ Compiled in 379ms (425 modules)
 âœ“ Compiled in 377ms (425 modules)
 âœ“ Compiled in 384ms (425 modules)
 âœ“ Compiled in 395ms (425 modules)
 GET /tasks 200 in 149ms
Auth: Verifying token...
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/users/me/route.ts:23:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/users/me 404 in 93ms
Auth: Verifying token...
Auth: Verifying token...
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/tasks/route.ts:33:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/resources/route.ts:33:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=50 200 in 168ms
 GET /api/resources 200 in 168ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
Auth: Verifying token...
Token verification failed: JWSSignatureVerificationFailed: signature verification failed
    at async verifyToken (src/lib/auth.ts:72:25)
    at async GET (src/app/api/users/me/route.ts:23:18)
  70 |     
  71 |     // Try to verify the token
> 72 |     const { payload } = await jwtVerify(token, JWT_SECRET);
     |                         ^
  73 |     
  74 |     console.log('Auth: Token verified successfully');
  75 |     return payload as AuthUser; {
  code: 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED'
}
Auth: Token verification failed, returning mock user for debugging
 GET /api/users/me 404 in 124ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /login 200 in 136ms
 âœ“ Compiled in 399ms (425 modules)
 GET /login 200 in 16ms
 âœ“ Compiled in 409ms (425 modules)
 GET /login 200 in 18ms
 âœ“ Compiled in 405ms (425 modules)
 GET /login 200 in 17ms
 âœ“ Compiled in 405ms (425 modules)
 GET /login 200 in 19ms
 âœ“ Compiled in 405ms (425 modules)
 GET /login 200 in 19ms
 âœ“ Compiled in 405ms (425 modules)
 GET /login 200 in 19ms
 âœ“ Compiled in 407ms (425 modules)
 GET /login 200 in 21ms
 âœ“ Compiled in 419ms (425 modules)
 GET /login 200 in 27ms
 âœ“ Compiled in 405ms (425 modules)
 GET /login 200 in 21ms
 âœ“ Compiled in 429ms (425 modules)
 GET /login 200 in 63ms
 âœ“ Compiled in 401ms (425 modules)
 GET /login 200 in 14ms
 âœ“ Compiled in 413ms (425 modules)
 GET /login 200 in 25ms
 âœ“ Compiled in 406ms (425 modules)
 GET /login 200 in 18ms
 âœ“ Compiled in 405ms (425 modules)
 GET /login 200 in 15ms
 âœ“ Compiled in 410ms (425 modules)
 GET /login 200 in 18ms
 âœ“ Compiled /api/auth/login in 352ms (1168 modules)
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /login 200 in 295ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 497ms
 âœ“ Compiled in 398ms (425 modules)
 GET /login 200 in 20ms
 â—‹ Compiling /dashboard ...
 âœ“ Compiled /dashboard in 742ms (2229 modules)
 GET /dashboard 200 in 951ms
 GET /dashboard 200 in 19ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 49ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 âœ“ Compiled /api/dashboard in 154ms (2217 modules)
Dashboard API: Starting request...
Dashboard API: Bypassing authentication for debugging
Dashboard API: Using mock user: System Administrator
Auth hasPermission: Checking permission: projects:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: budgets:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE "public"."tbl_tasks"."status" = CAST($1::text AS "public"."TaskStatus") OFFSET $2) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_roles"."id" FROM "public"."tbl_roles" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT SUM("anggaran_tersedia") AS "_sum$anggaran_tersedia", SUM("total_penyerapan") AS "_sum$total_penyerapan" FROM (SELECT "public"."tbl_budgets"."anggaran_tersedia", "public"."tbl_budgets"."total_penyerapan" FROM "public"."tbl_budgets" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE "public"."tbl_users"."isActive" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE ("public"."tbl_tasks"."status" <> CAST($1::text AS "public"."TaskStatus") AND "public"."tbl_tasks"."endDate" < $2) OFFSET $3) AS "sub"
 GET /api/dashboard 200 in 235ms
 âœ“ Compiled in 415ms (954 modules)
 GET /dashboard 200 in 37ms
 âœ“ Compiled in 389ms (954 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 419ms (954 modules)
 GET /dashboard 200 in 18ms
 GET /tasks 200 in 46ms
Auth: Verifying token...
Auth: Token verified successfully
Auth: Verifying token...
 GET /api/users/me 200 in 56ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 63ms
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=50 200 in 65ms
 âœ“ Compiled in 409ms (954 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 411ms (954 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 413ms (954 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 411ms (954 modules)
 GET /tasks 200 in 18ms
 â—‹ Compiling /resources ...
 âœ“ Compiled /resources in 550ms (2246 modules)
 GET /resources 200 in 757ms
 GET /resources 200 in 17ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources?page=1&limit=50 200 in 50ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 â—‹ Compiling /api/users ...
 âœ“ Compiled /api/users in 562ms (2250 modules)
Auth: Verifying token...
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: users:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?limit=100'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE 1=1 ORDER BY "public"."tbl_users"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1,$2,$3,$4) OFFSET $5
 GET /api/users?limit=100 200 in 698ms
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?limit=100 200 in 699ms
 GET /resources 200 in 112ms
 âœ“ Compiled in 774ms (960 modules)
 GET /resources 200 in 45ms
 âœ“ Compiled in 397ms (960 modules)
 GET /resources 200 in 17ms
 âœ“ Compiled in 404ms (960 modules)
 GET /resources 200 in 16ms
 âœ“ Compiled in 401ms (960 modules)
 GET /resources 200 in 17ms
 âœ“ Compiled in 398ms (960 modules)
 GET /resources 200 in 17ms
 âœ“ Compiled in 410ms (960 modules)
 GET /resources 200 in 14ms
 âœ“ Compiled in 410ms (960 modules)
 GET /resources 200 in 19ms
 âœ“ Compiled in 412ms (960 modules)
 GET /resources 200 in 19ms
 âœ“ Compiled in 401ms (960 modules)
 GET /resources 200 in 16ms
 âœ“ Compiled in 415ms (960 modules)
 GET /resources 200 in 18ms
 âœ“ Compiled in 412ms (960 modules)
 GET /resources 200 in 18ms
 âœ“ Compiled in 391ms (960 modules)
 GET /resources 200 in 21ms
 âœ“ Compiled in 404ms (960 modules)
 GET /resources 200 in 19ms
 âœ“ Compiled in 414ms (960 modules)
 GET /resources 200 in 18ms
 âœ“ Compiled in 412ms (960 modules)
 GET /resources 200 in 17ms
 âœ“ Compiled in 398ms (960 modules)
 GET /resources 200 in 19ms
 âœ“ Compiled in 421ms (960 modules)
 GET /resources 200 in 23ms
 âœ“ Compiled in 409ms (960 modules)
 GET /resources 200 in 19ms
 âœ“ Compiled in 410ms (960 modules)
 GET /resources 200 in 20ms
 âœ“ Compiled in 416ms (960 modules)
 GET /resources 200 in 17ms
 âœ“ Compiled in 413ms (960 modules)
 GET /resources 200 in 21ms
 âœ“ Compiled /api/health in 243ms (2252 modules)
 GET /api/health 200 in 277ms
 GET /resources 200 in 128ms
 âœ“ Compiled in 65ms (946 modules)
 âœ“ Compiled in 422ms (960 modules)
 GET /resources 200 in 17ms
 âœ“ Compiled in 410ms (960 modules)
 GET /resources 200 in 21ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 292ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/tasks?page=1&limit=5 403 in 39ms
 âœ“ Compiled in 585ms (960 modules)
 GET /resources 200 in 18ms
 âœ“ Compiled in 406ms (960 modules)
 GET /resources 200 in 22ms
 âœ“ Compiled in 407ms (960 modules)
 GET /resources 200 in 18ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 274ms
 âœ“ Compiled in 608ms (960 modules)
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/tasks?page=1&limit=5 403 in 22ms
 GET /resources 200 in 28ms
 âœ“ Compiled in 387ms (960 modules)
 GET /resources 200 in 19ms
 âœ“ Compiled in 424ms (960 modules)
 GET /resources 200 in 29ms
 âœ“ Compiled in 392ms (960 modules)
 GET /resources 200 in 18ms
 âœ“ Compiled in 421ms (960 modules)
 GET /resources 200 in 23ms
 âœ“ Compiled in 422ms (960 modules)
 GET /resources 200 in 25ms
 âœ“ Compiled in 408ms (960 modules)
 GET /resources 200 in 18ms
 âœ“ Compiled in 419ms (960 modules)
 GET /resources 200 in 24ms
 âœ“ Compiled in 415ms (960 modules)
 GET /resources 200 in 21ms
 âœ“ Compiled in 406ms (960 modules)
 GET /resources 200 in 18ms
 âœ“ Compiled in 418ms (960 modules)
 GET /resources 200 in 19ms
 âœ“ Compiled in 414ms (960 modules)
 GET /resources 200 in 22ms
 âœ“ Compiled in 391ms (960 modules)
 GET /resources 200 in 20ms
 âœ“ Compiled in 392ms (960 modules)
 GET /resources 200 in 20ms
 âœ“ Compiled in 419ms (960 modules)
 GET /resources 200 in 22ms
 âœ“ Compiled in 432ms (960 modules)
 GET /resources 200 in 21ms
 âœ“ Compiled in 420ms (960 modules)
 GET /resources 200 in 23ms
 âœ“ Compiled in 424ms (960 modules)
 GET /resources 200 in 23ms
 âœ“ Compiled in 423ms (960 modules)
 GET /resources 200 in 20ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
 âœ“ Compiled in 614ms (960 modules)
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
 POST /api/auth/login 200 in 265ms
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 GET /resources 200 in 22ms
 âœ“ Compiled in 419ms (960 modules)
 GET /resources 200 in 26ms
 âœ“ Compiled in 423ms (960 modules)
 GET /resources 200 in 24ms
 âœ“ Compiled in 406ms (960 modules)
 GET /resources 200 in 19ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
 POST /api/auth/login 200 in 239ms
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 âœ“ Compiled in 446ms (960 modules)
 GET /resources 200 in 23ms
 âœ“ Compiled in 67ms (946 modules)
 âœ“ Compiled in 404ms (960 modules)
 GET /resources 200 in 23ms
 âœ“ Compiled in 59ms (946 modules)
 âœ“ Compiled in 429ms (960 modules)
 GET /resources 200 in 25ms
 âœ“ Compiled in 59ms (946 modules)
 âœ“ Compiled in 456ms (960 modules)
 GET /resources 200 in 22ms
 âœ“ Compiled in 46ms (946 modules)
 âœ“ Compiled in 392ms (960 modules)
 GET /resources 200 in 25ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 235ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=5 200 in 21ms
 GET /resources 200 in 132ms
 âœ“ Compiled in 807ms (960 modules)
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 30ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?limit=100'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
Auth: Verifying token...
Auth: Verifying token...
 GET /api/projects?limit=100 200 in 52ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth: Token verified successfully
Auth hasPermission: Checking permission: users:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT 1
 GET /api/resources?page=1&limit=50 200 in 53ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE 1=1 ORDER BY "public"."tbl_users"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1,$2,$3,$4) OFFSET $5
 GET /api/users?limit=100 200 in 55ms
 âœ“ Compiled in 395ms (960 modules)
 GET /resources 200 in 18ms
 âœ“ Compiled in 415ms (960 modules)
 GET /resources 200 in 17ms
 âœ“ Compiled in 383ms (960 modules)
 GET /resources 200 in 16ms
 GET /tasks 200 in 29ms
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/users/me 200 in 25ms
Auth: Verifying token...
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 30ms
 GET /api/tasks?page=1&limit=50 200 in 30ms
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 383ms (960 modules)
 GET /tasks 200 in 18ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 238ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/resources 403 in 9ms
 âœ“ Compiled in 409ms (960 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled /projects in 363ms (1704 modules)
 GET /projects 200 in 515ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
 GET /api/resources 200 in 56ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 âœ“ Compiled /api/project-types in 575ms (1720 modules)
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 453ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
 GET /api/project-types 200 in 467ms
 GET /projects 200 in 54ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: projects:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Filter params: {
  search: '',
  status: '',
  type: '',
  url: 'http://localhost:3000/api/projects?page=1&limit=50'
}
Auth hasPermission: Checking permission: projects:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Projects API - Where clause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/projects?page=1&limit=50 200 in 18ms
 âœ“ Compiled in 398ms (965 modules)
 GET /projects 200 in 18ms
 âœ“ Compiled in 69ms (951 modules)
 â—‹ Compiling /dashboard ...
 âœ“ Compiled /dashboard in 518ms (2253 modules)
 GET /dashboard 200 in 705ms
 GET /dashboard 200 in 23ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
 POST /api/auth/login 403 in 305ms
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/resources 403 in 16ms
 âœ“ Compiled /api/dashboard in 500ms (2255 modules)
Dashboard API: Starting request...
Dashboard API: Bypassing authentication for debugging
Dashboard API: Using mock user: System Administrator
Auth hasPermission: Checking permission: projects:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: budgets:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE "public"."tbl_users"."isActive" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE ("public"."tbl_tasks"."status" <> CAST($1::text AS "public"."TaskStatus") AND "public"."tbl_tasks"."endDate" < $2) OFFSET $3) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT SUM("anggaran_tersedia") AS "_sum$anggaran_tersedia", SUM("total_penyerapan") AS "_sum$total_penyerapan" FROM (SELECT "public"."tbl_budgets"."anggaran_tersedia", "public"."tbl_budgets"."total_penyerapan" FROM "public"."tbl_budgets" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE "public"."tbl_tasks"."status" = CAST($1::text AS "public"."TaskStatus") OFFSET $2) AS "sub"
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/dashboard 200 in 529ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_roles"."id" FROM "public"."tbl_roles" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
 GET /dashboard 200 in 60ms
 âœ“ Compiled in 39ms (951 modules)
 âœ“ Compiled in 414ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 57ms (951 modules)
 âœ“ Compiled in 434ms (965 modules)
 GET /dashboard 200 in 22ms
 âœ“ Compiled in 61ms (951 modules)
 âœ“ Compiled in 437ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 74ms (951 modules)
 âœ“ Compiled in 416ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 62ms (951 modules)
 âœ“ Compiled in 412ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 417ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 43ms (951 modules)
 âœ“ Compiled in 412ms (965 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 411ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 404ms (965 modules)
 GET /dashboard 200 in 20ms
 âœ“ Compiled in 414ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 414ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 416ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 419ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 414ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 415ms (965 modules)
 GET /dashboard 200 in 20ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 280ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/tasks?page=1&limit=5 403 in 17ms
Auth: Verifying token...
Auth: No token provided, returning null
 GET /api/resources 403 in 12ms
 âœ“ Compiled in 419ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 417ms (965 modules)
 GET /dashboard 200 in 23ms
 âœ“ Compiled in 405ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 423ms (965 modules)
 GET /dashboard 200 in 18ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 403 in 230ms
 âœ“ Compiled in 417ms (965 modules)
 GET /dashboard 200 in 22ms
 âœ“ Compiled in 416ms (965 modules)
 GET /dashboard 200 in 23ms
 âœ“ Compiled in 393ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 417ms (965 modules)
 GET /dashboard 200 in 20ms
 âœ“ Compiled in 415ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 418ms (965 modules)
 GET /dashboard 200 in 20ms
 âœ“ Compiled in 418ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 395ms (965 modules)
 GET /dashboard 200 in 20ms
 âœ“ Compiled in 391ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 427ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 420ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 420ms (965 modules)
 GET /dashboard 200 in 22ms
 âœ“ Compiled in 417ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 387ms (965 modules)
 GET /dashboard 200 in 20ms
 âœ“ Compiled in 423ms (965 modules)
 GET /dashboard 200 in 22ms
 âœ“ Compiled in 416ms (965 modules)
 GET /dashboard 200 in 28ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 236ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=5 200 in 15ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 16ms
 âœ“ Compiled in 418ms (965 modules)
 GET /dashboard 200 in 67ms
 âœ“ Compiled in 396ms (965 modules)
 GET /dashboard 200 in 22ms
 âœ“ Compiled in 427ms (965 modules)
 GET /dashboard 200 in 22ms
 âœ“ Compiled in 420ms (965 modules)
 GET /dashboard 200 in 24ms
 âœ“ Compiled in 391ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 415ms (965 modules)
 GET /dashboard 200 in 43ms
 âœ“ Compiled in 431ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 425ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 414ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 412ms (965 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 419ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 409ms (965 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 404ms (965 modules)
 GET /dashboard 200 in 15ms
 âœ“ Compiled in 412ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 393ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 392ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 408ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 401ms (965 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 416ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 400ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 428ms (965 modules)
 GET /dashboard 200 in 23ms
 âœ“ Compiled in 396ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 399ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 408ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 437ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 426ms (965 modules)
 GET /dashboard 200 in 22ms
 âœ“ Compiled in 415ms (965 modules)
 GET /dashboard 200 in 25ms
 âœ“ Compiled in 558ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 67ms (951 modules)
 âœ“ Compiled in 425ms (965 modules)
 GET /dashboard 200 in 23ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 242ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=5 200 in 11ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 14ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=2 200 in 12ms
 âœ“ Compiled in 439ms (965 modules)
 GET /dashboard 200 in 30ms
 âœ“ Compiled in 415ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 415ms (965 modules)
 GET /dashboard 200 in 22ms
 âœ“ Compiled in 404ms (965 modules)
 GET /dashboard 200 in 23ms
 âœ“ Compiled in 384ms (965 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 397ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 431ms (965 modules)
 GET /dashboard 200 in 25ms
 âœ“ Compiled in 419ms (965 modules)
 GET /dashboard 200 in 24ms
 âœ“ Compiled in 419ms (965 modules)
 GET /dashboard 200 in 20ms
 âœ“ Compiled in 412ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 416ms (965 modules)
 GET /dashboard 200 in 22ms
 âœ“ Compiled in 409ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 404ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 400ms (965 modules)
 GET /dashboard 200 in 22ms
 âœ“ Compiled in 384ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 412ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 405ms (965 modules)
 GET /dashboard 200 in 15ms
 âœ“ Compiled in 406ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 416ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 412ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 417ms (965 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 413ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 386ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 395ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 407ms (965 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 407ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 413ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 404ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 415ms (965 modules)
 GET /dashboard 200 in 15ms
 âœ“ Compiled in 413ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 404ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 407ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 406ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 405ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 411ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 422ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 413ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 396ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 412ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 411ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 417ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 416ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 387ms (965 modules)
 GET /dashboard 200 in 19ms
 âœ“ Compiled in 411ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 408ms (965 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 408ms (965 modules)
 GET /dashboard 200 in 50ms
 âœ“ Compiled in 438ms (965 modules)
 GET /dashboard 200 in 16ms
 âœ“ Compiled in 398ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 411ms (965 modules)
 GET /dashboard 200 in 21ms
 âœ“ Compiled in 419ms (965 modules)
 GET /dashboard 200 in 20ms
 âœ“ Compiled in 417ms (965 modules)
 GET /dashboard 200 in 18ms
 âœ“ Compiled in 417ms (965 modules)
 GET /dashboard 200 in 26ms
 âœ“ Compiled in 418ms (965 modules)
 GET /dashboard 200 in 17ms
 âœ“ Compiled in 417ms (965 modules)
 GET /dashboard 200 in 24ms
 âœ“ Compiled in 395ms (965 modules)
 GET /dashboard 200 in 18ms
 GET /dashboard 200 in 262ms
 âœ“ Compiled in 408ms (965 modules)
Auth: Verifying token...
Auth: Token verified successfully
prisma:query SELECT 1
 GET /api/users/me 200 in 21ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Dashboard API: Starting request...
Dashboard API: Bypassing authentication for debugging
Dashboard API: Using mock user: System Administrator
Auth hasPermission: Checking permission: projects:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: budgets:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE "public"."tbl_tasks"."status" = CAST($1::text AS "public"."TaskStatus") OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_projects"."id" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."status" = CAST($1::text AS "public"."ProjectStatus") OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE ("public"."tbl_tasks"."status" <> CAST($1::text AS "public"."TaskStatus") AND "public"."tbl_tasks"."endDate" < $2) OFFSET $3) AS "sub"
prisma:query SELECT SUM("anggaran_tersedia") AS "_sum$anggaran_tersedia", SUM("total_penyerapan") AS "_sum$total_penyerapan" FROM (SELECT "public"."tbl_budgets"."anggaran_tersedia", "public"."tbl_budgets"."total_penyerapan" FROM "public"."tbl_budgets" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE "public"."tbl_users"."isActive" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_users"."id" FROM "public"."tbl_users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_roles"."id" FROM "public"."tbl_roles" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."description", "public"."tbl_projects"."client", "public"."tbl_projects"."location", "public"."tbl_projects"."status"::text, "public"."tbl_projects"."priority"::text, "public"."tbl_projects"."progress", "public"."tbl_projects"."startDate", "public"."tbl_projects"."endDate", "public"."tbl_projects"."createdBy", "public"."tbl_projects"."createdAt", "public"."tbl_projects"."updatedAt", "public"."tbl_projects"."type"::text, "public"."tbl_projects"."timelineStatus"::text, "public"."tbl_projects"."timelineUpdatedAt", "public"."tbl_projects"."riskLevel"::text, "public"."tbl_projects"."delayDays", "public"."tbl_projects"."warningThreshold", "public"."tbl_projects"."daysRemaining", "public"."tbl_projects"."progressPercentage", COALESCE("aggr_selection_0_Task"."_aggr_count_tasks", 0) AS "_aggr_count_tasks" FROM "public"."tbl_projects" LEFT JOIN (SELECT "public"."tbl_tasks"."projectId", COUNT(*) AS "_aggr_count_tasks" FROM "public"."tbl_tasks" WHERE 1=1 GROUP BY "public"."tbl_tasks"."projectId") AS "aggr_selection_0_Task" ON ("public"."tbl_projects"."id" = "aggr_selection_0_Task"."projectId") WHERE 1=1 ORDER BY "public"."tbl_projects"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name" FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/dashboard 200 in 40ms
 âœ“ Compiled in 419ms (965 modules)
 GET /dashboard 200 in 16ms
 GET /dashboard 200 in 35ms
 âœ“ Compiled in 422ms (965 modules)
 GET /dashboard 200 in 20ms
 GET /tasks 200 in 45ms
 âœ“ Compiled in 416ms (965 modules)
 GET /tasks 200 in 24ms
Auth: Verifying token...
Auth: Token verified successfully
 GET /api/users/me 200 in 26ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
Auth: Verifying token...
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: resources:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_resources"."id" FROM "public"."tbl_resources" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=50 200 in 33ms
prisma:query SELECT "public"."tbl_resources"."id", "public"."tbl_resources"."name", "public"."tbl_resources"."description", "public"."tbl_resources"."createdAt", "public"."tbl_resources"."updatedAt", "public"."tbl_resources"."createdBy", "public"."tbl_resources"."userId", "public"."tbl_resources"."skills", "public"."tbl_resources"."department", "public"."tbl_resources"."phone", "public"."tbl_resources"."email", "public"."tbl_resources"."maxProjects", "public"."tbl_resources"."hourlyRate", "public"."tbl_resources"."status"::text, "public"."tbl_resources"."type"::text FROM "public"."tbl_resources" WHERE 1=1 ORDER BY "public"."tbl_resources"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/resources 200 in 39ms
 âœ“ Compiled in 416ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 417ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 421ms (965 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 418ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 417ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 414ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 418ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 409ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 421ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 417ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 419ms (965 modules)
 GET /tasks 200 in 26ms
 âœ“ Compiled in 437ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 414ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 419ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 402ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 419ms (965 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 397ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 388ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 415ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 420ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 400ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 412ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 420ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 417ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 407ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 416ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 408ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 410ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 395ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 400ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 398ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 416ms (965 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 414ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 415ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 400ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 405ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 403ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 400ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 400ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 399ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 405ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 406ms (965 modules)
 GET /tasks 200 in 15ms
 âœ“ Compiled in 417ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 418ms (965 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 414ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 405ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 401ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 410ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 424ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 416ms (965 modules)
 GET /tasks 200 in 29ms
 âœ“ Compiled in 428ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 419ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 402ms (965 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 427ms (965 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 404ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 417ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 416ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 421ms (965 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 411ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 423ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 408ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 408ms (965 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 414ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 409ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 405ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 410ms (965 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 404ms (965 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 410ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 406ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 417ms (965 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 426ms (965 modules)
 GET /tasks 200 in 31ms
 GET /api/health 200 in 12ms
 âœ“ Compiled in 425ms (965 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 419ms (965 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 393ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 426ms (965 modules)
 GET /tasks 200 in 22ms
 âœ“ Compiled in 421ms (965 modules)
 GET /tasks 200 in 24ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 241ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=5 200 in 12ms
 âœ“ Compiled in 967ms (965 modules)
 GET /tasks 200 in 58ms
 âœ“ Compiled in 414ms (965 modules)
 GET /tasks 200 in 16ms
 âœ“ Compiled in 413ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 405ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 392ms (965 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 415ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 423ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 415ms (965 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 412ms (965 modules)
 GET /tasks 200 in 21ms
 âœ“ Compiled in 412ms (965 modules)
 GET /tasks 200 in 18ms
 âœ“ Compiled in 406ms (965 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 413ms (965 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 412ms (965 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 427ms (965 modules)
 GET /tasks 200 in 22ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 227ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=2 200 in 14ms
 âœ“ Compiled in 390ms (965 modules)
 GET /tasks 200 in 17ms
 âœ“ Compiled in 416ms (965 modules)
 GET /tasks 200 in 23ms
 âœ“ Compiled in 407ms (965 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 428ms (965 modules)
 GET /tasks 200 in 20ms
prisma:query SELECT 1
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."email", "public"."tbl_users"."name", "public"."tbl_users"."password", "public"."tbl_users"."phone", "public"."tbl_users"."avatar", "public"."tbl_users"."roleId", "public"."tbl_users"."isActive", "public"."tbl_users"."createdAt", "public"."tbl_users"."updatedAt", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_roles"."id", "public"."tbl_roles"."name", "public"."tbl_roles"."description", "public"."tbl_roles"."permissions", "public"."tbl_roles"."createdAt", "public"."tbl_roles"."updatedAt" FROM "public"."tbl_roles" WHERE "public"."tbl_roles"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."passwordChangedAt" FROM "public"."tbl_users" WHERE ("public"."tbl_users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_two_factor_auth"."id", "public"."tbl_two_factor_auth"."userId", "public"."tbl_two_factor_auth"."secret", "public"."tbl_two_factor_auth"."backupCodes", "public"."tbl_two_factor_auth"."isEnabled", "public"."tbl_two_factor_auth"."createdAt", "public"."tbl_two_factor_auth"."updatedAt" FROM "public"."tbl_two_factor_auth" WHERE ("public"."tbl_two_factor_auth"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."tbl_security_settings"."id", "public"."tbl_security_settings"."passwordMinLength", "public"."tbl_security_settings"."passwordRequireUpper", "public"."tbl_security_settings"."passwordRequireLower", "public"."tbl_security_settings"."passwordRequireNumber", "public"."tbl_security_settings"."passwordRequireSpecial", "public"."tbl_security_settings"."passwordExpiryDays", "public"."tbl_security_settings"."sessionTimeoutMinutes", "public"."tbl_security_settings"."maxConcurrentSessions", "public"."tbl_security_settings"."requireReauthSensitive", "public"."tbl_security_settings"."enableTwoFactor", "public"."tbl_security_settings"."enableIpWhitelist", "public"."tbl_security_settings"."allowedIps", "public"."tbl_security_settings"."enableAuditLog", "public"."tbl_security_settings"."enableDataEncryption", "public"."tbl_security_settings"."encryptionAlgorithm", "public"."tbl_security_settings"."keyRotationDays", "public"."tbl_security_settings"."createdAt", "public"."tbl_security_settings"."updatedAt", "public"."tbl_security_settings"."updatedBy" FROM "public"."tbl_security_settings" WHERE 1=1 ORDER BY "public"."tbl_security_settings"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_user_sessions"."id" FROM "public"."tbl_user_sessions" WHERE ("public"."tbl_user_sessions"."userId" = $1 AND "public"."tbl_user_sessions"."isActive" = $2 AND "public"."tbl_user_sessions"."expiresAt" > $3) OFFSET $4) AS "sub"
prisma:query INSERT INTO "public"."tbl_user_sessions" ("id","userId","sessionId","ipAddress","userAgent","isActive","lastActivity","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."tbl_user_sessions"."id", "public"."tbl_user_sessions"."userId", "public"."tbl_user_sessions"."sessionId", "public"."tbl_user_sessions"."ipAddress", "public"."tbl_user_sessions"."userAgent", "public"."tbl_user_sessions"."isActive", "public"."tbl_user_sessions"."lastActivity", "public"."tbl_user_sessions"."expiresAt", "public"."tbl_user_sessions"."createdAt"
prisma:query INSERT INTO "public"."tbl_activity_logs" ("id","action","entity","entityId","description","userId","ipaddress","useragent","metadata","severity","createdAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."tbl_activity_logs"."id", "public"."tbl_activity_logs"."action", "public"."tbl_activity_logs"."entity", "public"."tbl_activity_logs"."entityId", "public"."tbl_activity_logs"."description", "public"."tbl_activity_logs"."userId", "public"."tbl_activity_logs"."ipaddress", "public"."tbl_activity_logs"."useragent", "public"."tbl_activity_logs"."metadata", "public"."tbl_activity_logs"."severity", "public"."tbl_activity_logs"."createdAt"
 POST /api/auth/login 200 in 284ms
Auth: Verifying token...
Auth: Token verified successfully
Auth hasPermission: Checking permission: tasks:read for user: System Admin
Auth hasPermission: Permission granted (bypassed)
Auth hasPermission: Checking permission: tasks:all for user: System Admin
Auth hasPermission: Permission granted (bypassed)
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."tbl_tasks"."id" FROM "public"."tbl_tasks" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."tbl_tasks"."id", "public"."tbl_tasks"."title", "public"."tbl_tasks"."description", "public"."tbl_tasks"."projectId", "public"."tbl_tasks"."assigneeId", "public"."tbl_tasks"."creatorId", "public"."tbl_tasks"."status"::text, "public"."tbl_tasks"."priority"::text, "public"."tbl_tasks"."progress", "public"."tbl_tasks"."startDate", "public"."tbl_tasks"."endDate", "public"."tbl_tasks"."estimatedHours", "public"."tbl_tasks"."actualHours", "public"."tbl_tasks"."createdAt", "public"."tbl_tasks"."updatedAt", "public"."tbl_tasks"."timelineStatus"::text, "public"."tbl_tasks"."timelineUpdatedAt", "public"."tbl_tasks"."riskLevel"::text, "public"."tbl_tasks"."delayDays", "public"."tbl_tasks"."warningThreshold", "public"."tbl_tasks"."daysRemaining", "public"."tbl_tasks"."progressPercentage" FROM "public"."tbl_tasks" WHERE 1=1 ORDER BY "public"."tbl_tasks"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."tbl_projects"."id", "public"."tbl_projects"."name", "public"."tbl_projects"."type"::text FROM "public"."tbl_projects" WHERE "public"."tbl_projects"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 GET /api/tasks?page=1&limit=2 200 in 16ms
prisma:query SELECT "public"."tbl_users"."id", "public"."tbl_users"."name", "public"."tbl_users"."email" FROM "public"."tbl_users" WHERE "public"."tbl_users"."id" IN ($1) OFFSET $2
 âœ“ Compiled in 507ms (965 modules)
 GET /tasks 200 in 20ms
 âœ“ Compiled in 427ms (965 modules)
 GET /tasks 200 in 29ms
 âœ“ Compiled in 420ms (965 modules)
 GET /tasks 200 in 24ms
 âœ“ Compiled in 417ms (965 modules)
 GET /tasks 200 in 26ms
 âœ“ Compiled in 411ms (965 modules)
 GET /tasks 200 in 19ms
 âœ“ Compiled in 438ms (965 modules)
 GET /tasks 200 in 135ms
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
 âœ“ Compiled in 480ms (965 modules)
 GET /tasks 200 in 24ms
[2025-10-22T06:27:00.073Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T06:27:00.075Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[2025-10-22T06:27:46.456Z] Started scheduled backup job: Daily Midnight Backup (0 0 * * *)
[2025-10-22T06:27:46.457Z] Started scheduled backup job: Daily Noon Backup (0 12 * * *)
> Initializing backup scheduler...
> Backup scheduler initialized: 2/2 jobs active
> Next backup scheduled for: 2025-10-22T17:00:00.000Z
Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException: Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
 â¨¯ uncaughtException:  Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
    at <unknown> (Error: listen EADDRINUSE: address already in use 0.0.0.0:3000) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 3000
}
