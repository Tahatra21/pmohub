generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EstimateLine {
  id              String   @id @default(cuid())
  estimateId      String?
  costEstimatorId String?
  type            String
  refId           String?
  description     String
  unit            String
  qty             Float
  unitPrice       Float
  isAtCost        Boolean  @default(false)
  meta            Json?
  lineTotal       Float
  sort            Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([estimateId])
  @@index([costEstimatorId])
}

model HjtRate {
  id           String   @id @default(cuid())
  type         String
  no           Int?
  spec         String?
  item         String?
  ref          String
  khs2022      String?
  monthly      Int?
  daily        Int?
  numericValue Int?
  isAtCost     Boolean  @default(false)
  note         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("tbl_hjt")
}

model HjtBlp {
  id        String   @id @default(cuid())
  spec      String
  ref       String
  monthly   Int
  daily     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tbl_hjt_blp")
}

model HjtBlnp {
  id           String   @id @default(cuid())
  item         String
  ref          String
  khs2022      String
  numericValue Int?
  isAtCost     Boolean  @default(false)
  note         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("tbl_hjt_blnp")
}

model CostEstimator {
  id             String    @id @default(cuid())
  name           String
  projectId      String?
  projectName    String?
  client         String?
  description    String?
  status         String    @default("DRAFT")
  version        String    @default("1.0")
  markUpPct      Float     @default(0)
  contingencyPct Float     @default(0)
  discountPct    Float     @default(0)
  ppnPct         Float     @default(11)
  escalationPct  Float     @default(0)
  subtotal       Float     @default(0)
  escalation     Float     @default(0)
  overhead       Float     @default(0)
  contingency    Float     @default(0)
  discount       Float     @default(0)
  dpp            Float     @default(0)
  ppn            Float     @default(0)
  grandTotal     Float     @default(0)
  assumptions    Json?
  notes          String?
  createdBy      String?
  approvedBy     String?
  approvedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("tbl_cost_estimator")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  phone     String?
  avatar    String?
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  passwordChangedAt DateTime?

  // Relations
  createdProjects     Project[]           @relation("ProjectCreator")
  projectMemberships  ProjectMember[]
  assignedTasks       Task[]              @relation("TaskAssignee")
  createdTasks        Task[]              @relation("TaskCreator")
  userSessions        UserSession[]
  twoFactorAuth       TwoFactorAuth?
  uploadedDocuments   Document[]

  @@map("tbl_users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]

  @@map("tbl_roles")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  client      String
  location    String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  progress    Float         @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  type        ProjectType
  
  // Timeline tracking fields
  timelineStatus    TimelineStatus? @default(ON_TIME)
  timelineUpdatedAt DateTime?
  riskLevel         RiskLevel?      @default(LOW)
  delayDays         Int?            @default(0)
  warningThreshold  Int?            @default(7) // days before warning
  daysRemaining     Int?
  progressPercentage Float?

  // Relations
  creator             User               @relation("ProjectCreator", fields: [createdBy], references: [id])
  members             ProjectMember[]
  tasks               Task[]
  documents           Document[]

  @@map("tbl_projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String
  joinedAt  DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("tbl_project_members")
}

model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?
  projectId      String
  assigneeId     String?
  creatorId      String
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  progress       Float      @default(0)
  startDate      DateTime?
  endDate        DateTime?
  estimatedHours Float?
  actualHours    Float?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  // Timeline tracking fields
  timelineStatus    TimelineStatus? @default(ON_TIME)
  timelineUpdatedAt DateTime?
  riskLevel         RiskLevel?      @default(LOW)
  delayDays         Int?            @default(0)
  warningThreshold  Int?            @default(3) // days before warning
  daysRemaining     Int?
  progressPercentage Float?

  // Relations
  project           Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee           User?               @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator            User                @relation("TaskCreator", fields: [creatorId], references: [id])
  documents          Document[]

  @@map("tbl_tasks")
}

model TaskDependency {
  id              String @id @default(cuid())
  taskId          String
  dependsOnTaskId String

  @@unique([taskId, dependsOnTaskId])
  @@map("tbl_task_dependencies")
}

model Milestone {
  id          String          @id @default(cuid())
  title       String
  description String?
  projectId   String
  status      MilestoneStatus @default(UPCOMING)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("tbl_milestones")
}

model Resource {
  id          String         @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdBy   String
  userId      String         @unique
  skills      String?
  department  String?
  phone       String?
  email       String?
  maxProjects Int            @default(3)
  hourlyRate  Float?
  status      ResourceStatus @default(AVAILABLE)
  type        ResourceType

  @@map("tbl_resources")
}

model ResourceAllocation {
  id                   String           @id @default(cuid())
  resourceId           String
  projectId            String
  allocatedAt          DateTime         @default(now())
  taskId               String?
  startDate            DateTime         @default(now())
  endDate              DateTime?
  status               AllocationStatus @default(ACTIVE)
  notes                String?
  allocatedBy          String
  role                 String?
  allocationPercentage Int              @default(100)

  @@map("tbl_resource_allocations")
}

model Budget {
  id               String     @id @default(cuid())
  costCenter       String     @map("cost_center")
  manager          String
  prkNumber        String     @map("prk_number")
  prkName          String     @map("prk_name")
  kategoriBeban    String     @map("kategori_beban")
  coaNumber        String     @map("coa_number")
  anggaranTersedia Decimal    @map("anggaran_tersedia")
  nilaiPo          Decimal    @default(0) @map("nilai_po")
  nilaiNonPo       Decimal    @default(0) @map("nilai_non_po")
  totalSpr         Decimal    @default(0) @map("total_spr")
  totalPenyerapan  Decimal    @default(0) @map("total_penyerapan")
  sisaAnggaran     Decimal    @default(0) @map("sisa_anggaran")
  tahun            Int
  projectId        String?    @map("project_id")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  taskId           String?    @map("task_id")
  budgetType       BudgetType @default(PROJECT) @map("budget_type")

  @@map("tbl_budgets")
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  fileType    String
  projectId   String?
  taskId      String?
  uploadedBy  String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader    User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("tbl_documents")
}

model ActivityLog {
  id          String   @id @default(cuid())
  action      String
  entity      String
  entityId    String?
  description String?
  userId      String
  ipAddress   String?  @map("ipaddress")
  userAgent   String?  @map("useragent")
  metadata    Json?
  severity    String   @default("info")
  createdAt   DateTime @default(now())

  @@map("tbl_activity_logs")
}

model Product {
  id             String   @id @default(cuid())
  produk         String
  deskripsi      String?
  id_kategori    String
  id_segmen      String
  id_stage       String
  harga          String?
  tanggal_launch String?
  pelanggan      String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  kategori       Category @relation(fields: [id_kategori], references: [id])
  segmen         Segment  @relation(fields: [id_segmen], references: [id])
  stage          Stage    @relation(fields: [id_stage], references: [id])

  @@map("tbl_produk")
}

model Category {
  id         String   @id @default(cuid())
  kategori   String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("tbl_kategori")
}

model Segment {
  id         String   @id @default(cuid())
  segmen     String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("tbl_segmen")
}

model Stage {
  id         String   @id @default(cuid())
  stage      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("tbl_stage")
}

model MonitoringLicense {
  id                      String    @id
  no_urut                 Int?
  nama_aplikasi           String
  bpo                     String?
  jenis_lisensi           String?
  jumlah                  Int?
  harga_satuan            Decimal?  @default(0)
  harga_total             Decimal?  @default(0)
  periode_po              Int?
  kontrak_layanan_bulan   Int?
  start_layanan           DateTime?
  akhir_layanan           DateTime?
  metode                  String?
  keterangan_akun         String?
  tanggal_aktivasi        DateTime?
  tanggal_pembaharuan     DateTime?
  status                  String    @default("Active")
  created_at              DateTime?
  updated_at              DateTime?
  selling_price           Decimal?  @default(0)
  purchase_price_per_unit Decimal?  @default(0)
  total_purchase_price    Decimal?  @default(0)
  total_selling_price     Decimal?  @default(0)

  @@map("tbl_mon_licenses")
}

model LicenseNotification {
  id                String    @id
  license_id        String?
  notification_type String
  notification_date DateTime
  is_sent           Boolean   @default(false)
  sent_at           DateTime?
  created_at        DateTime?

  @@map("tbl_license_notifications")
}

enum ProjectType {
  INFRA_NETWORK
  INFRA_CLOUD_DC
  MULTIMEDIA_IOT
  DIGITAL_ELECTRICITY
  SAAS_BASED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum MilestoneStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TimelineStatus {
  ON_TIME
  AT_RISK
  DELAYED
  AHEAD
}

enum ResourceType {
  PROJECT_MANAGER
  FIELD_ENGINEER
  IT_DEVELOPER
  TECHNICAL_TEAM
  CLIENT_STAKEHOLDER
}

enum ResourceStatus {
  AVAILABLE
  ALLOCATED
  BUSY
  ON_LEAVE
}

enum AllocationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RiskStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum BudgetType {
  PROJECT
  TASK
  GENERAL
}

model SecuritySettings {
  id                    String   @id @default(cuid())
  
  // Password Policy
  passwordMinLength     Int      @default(8)
  passwordRequireUpper  Boolean  @default(true)
  passwordRequireLower  Boolean  @default(true)
  passwordRequireNumber Boolean  @default(true)
  passwordRequireSpecial Boolean @default(true)
  passwordExpiryDays    Int      @default(90)
  
  // Session Settings
  sessionTimeoutMinutes Int      @default(30)
  maxConcurrentSessions Int      @default(3)
  requireReauthSensitive Boolean @default(true)
  
  // Access Control
  enableTwoFactor       Boolean  @default(false)
  enableIpWhitelist     Boolean  @default(false)
  allowedIps            Json     @default("[]")
  enableAuditLog        Boolean  @default(true)
  
  // Encryption
  enableDataEncryption  Boolean  @default(true)
  encryptionAlgorithm   String   @default("AES-256")
  keyRotationDays      Int      @default(30)
  
  // Metadata
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  updatedBy             String?
  
  @@map("tbl_security_settings")
}

model TwoFactorAuth {
  id          String   @id @default(cuid())
  userId      String   @unique
  secret      String
  backupCodes Json     @default("[]")
  isEnabled   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("tbl_two_factor_auth")
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String
  sessionId   String   @unique
  ipAddress   String?
  userAgent   String?
  isActive    Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("tbl_user_sessions")
}
